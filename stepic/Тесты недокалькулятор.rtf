{\rtf1\ansi\ansicpg1252\cocoartf2636
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0  python main.py\
   32      3801      45      123\
+ 698    -    2    + 43    +  49\
-----    ------    ----    -----    \
None\
=================== test session starts ===================\
platform linux -- Python 3.8.12, pytest-6.2.5, py-1.11.0, pluggy-1.0.0\
rootdir: /home/runner/boilerplate-arithmetic-formatter\
collected 10 items                                        \
\
test_module.py FFFFFFFFFF                           [100%]\
\
======================== FAILURES =========================\
______ test_template[test_two_problems_arrangement1] ______\
\
arguments = [['3801 - 2', '123 + 49']]\
expected_output = '  3801      123\\n-    2    +  49\\n------    -----'\
fail_message = 'Expected different output when calling "arithmetic_arranger()" with ["3801 - 2", "123 + 49"]'\
\
    @pytest.mark.parametrize('arguments,expected_output,fail_message', test_cases)\
    def test_template(arguments, expected_output, fail_message):\
        actual = arithmetic_arranger(*arguments)\
>       assert actual == expected_output, fail_message\
E       AssertionError: Expected different output when calling "arithmetic_arranger()" with ["3801 - 2", "123 + 49"]\
E       assert None == '  3801      123\\n-    2    +  49\\n------    -----'\
\
test_module.py:77: AssertionError\
------------------ Captured stdout call -------------------\
  3801      123\
-    2    +  49\
------    -----    \
______ test_template[test_two_problems_arrangement2] ______\
\
arguments = [['1 + 2', '1 - 9380']]\
expected_output = '  1         1\\n+ 2    - 9380\\n---    ------'\
fail_message = 'Expected different output when calling "arithmetic_arranger()" with ["1 + 2", "1 - 9380"]'\
\
    @pytest.mark.parametrize('arguments,expected_output,fail_message', test_cases)\
    def test_template(arguments, expected_output, fail_message):\
        actual = arithmetic_arranger(*arguments)\
>       assert actual == expected_output, fail_message\
E       AssertionError: Expected different output when calling "arithmetic_arranger()" with ["1 + 2", "1 - 9380"]\
E       assert None == '  1         1\\n+ 2    - 9380\\n---    ------'\
\
test_module.py:77: AssertionError\
------------------ Captured stdout call -------------------\
  1         1\
+ 2    - 9380\
---    ------    \
______ test_template[test_four_problems_arrangement] ______\
\
arguments = [['3 + 855', '3801 - 2', '45 + 43', '123 + 49']]\
expected_output = '    3      3801      45      123\\n+ 855    -    2    + 43    +  49\\n-----    ------    ----    -----'\
fail_message = 'Expected different output when calling "arithmetic_arranger()" with ["3 + 855", "3801 - 2", "45 + 43", "123 + 49"]'\
\
    @pytest.mark.parametrize('arguments,expected_output,fail_message', test_cases)\
    def test_template(arguments, expected_output, fail_message):\
        actual = arithmetic_arranger(*arguments)\
>       assert actual == expected_output, fail_message\
E       AssertionError: Expected different output when calling "arithmetic_arranger()" with ["3 + 855", "3801 - 2", "45 + 43", "123 + 49"]\
E       assert None == '    3      3801      45      123\\n+ 855    -    2    + 43    +  49\\n-----    ------    ----    -----'\
\
test_module.py:77: AssertionError\
------------------ Captured stdout call -------------------\
    3      3801      45      123\
+ 855    -    2    + 43    +  49\
-----    ------    ----    -----    \
______ test_template[test_five_problems_arrangement] ______\
\
arguments = [['11 + 4', '3801 - 2999', '1 + 2', '123 + 49', '1 - 9380']]\
expected_output = '  11      3801      1      123         1\\n+  4    - 2999    + 2    +  49    - 9380\\n----    ------    ---    -----    ------'\
fail_message = 'Expected different output when calling "arithmetic_arranger()" with ["11 + 4", "3801 - 2999", "1 + 2", "123 + 49", "1 - 9380"]'\
\
    @pytest.mark.parametrize('arguments,expected_output,fail_message', test_cases)\
    def test_template(arguments, expected_output, fail_message):\
>       actual = arithmetic_arranger(*arguments)\
\
test_module.py:76: \
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
arithmetic_arranger.py:15: in arithmetic_arranger\
    exit()\
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
\
self = Use exit() or Ctrl-D (i.e. EOF) to exit, code = None\
\
    def __call__(self, code=None):\
        # Shells like IDLE catch the SystemExit, but listen when their\
        # stdin wrapper is closed.\
        try:\
            sys.stdin.close()\
        except:\
            pass\
>       raise SystemExit(code)\
E       SystemExit: None\
\
/usr/lib/python3.8/_sitebuiltins.py:26: SystemExit\
------------------ Captured stdout call -------------------\
Error: Too many problems\
__________ test_template[test_too_many_problems] __________\
\
arguments = [['44 + 815', '909 - 2', '45 + 43', '123 + 49', '888 + 40', '653 + 87']]\
expected_output = 'Error: Too many problems.'\
fail_message = 'Expected calling "arithmetic_arranger()" with more than five problems to return "Error: Too many problems."'\
\
    @pytest.mark.parametrize('arguments,expected_output,fail_message', test_cases)\
    def test_template(arguments, expected_output, fail_message):\
>       actual = arithmetic_arranger(*arguments)\
\
test_module.py:76: \
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
arithmetic_arranger.py:15: in arithmetic_arranger\
    exit()\
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
\
self = Use exit() or Ctrl-D (i.e. EOF) to exit, code = None\
\
    def __call__(self, code=None):\
        # Shells like IDLE catch the SystemExit, but listen when their\
        # stdin wrapper is closed.\
        try:\
            sys.stdin.close()\
        except:\
            pass\
>       raise SystemExit(code)\
E       SystemExit: None\
\
/usr/lib/python3.8/_sitebuiltins.py:26: SystemExit\
------------------ Captured stdout call -------------------\
Error: Too many problems\
_________ test_template[test_incorrect_operator] __________\
\
arguments = [['3 / 855', '3801 - 2', '45 + 43', '123 + 49']]\
expected_output = "Error: Operator must be '+' or '-'."\
fail_message = 'Expected calling "arithmetic_arranger()" with a problem that uses the "/" operator to return "Error: Operator must be \\'+\\' or \\'-\\'."'\
\
    @pytest.mark.parametrize('arguments,expected_output,fail_message', test_cases)\
    def test_template(arguments, expected_output, fail_message):\
>       actual = arithmetic_arranger(*arguments)\
\
test_module.py:76: \
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
arithmetic_arranger.py:21: in arithmetic_arranger\
    exit()\
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
\
self = Use exit() or Ctrl-D (i.e. EOF) to exit, code = None\
\
    def __call__(self, code=None):\
        # Shells like IDLE catch the SystemExit, but listen when their\
        # stdin wrapper is closed.\
        try:\
            sys.stdin.close()\
        except:\
            pass\
>       raise SystemExit(code)\
E       SystemExit: None\
\
/usr/lib/python3.8/_sitebuiltins.py:26: SystemExit\
------------------ Captured stdout call -------------------\
Error: Operator must be \'91+\'92 or \'91-\'91\
___________ test_template[test_too_many_digits] ___________\
\
arguments = [['24 + 85215', '3801 - 2', '45 + 43', '123 + 49']]\
expected_output = 'Error: Numbers cannot be more than four digits.'\
fail_message = 'Expected calling "arithmetic_arranger()" with a problem that has a number over 4 digits long to return "Error: Numbers cannot be more than four digits."'\
\
    @pytest.mark.parametrize('arguments,expected_output,fail_message', test_cases)\
    def test_template(arguments, expected_output, fail_message):\
>       actual = arithmetic_arranger(*arguments)\
\
test_module.py:76: \
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
arithmetic_arranger.py:28: in arithmetic_arranger\
    exit()\
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
\
self = Use exit() or Ctrl-D (i.e. EOF) to exit, code = None\
\
    def __call__(self, code=None):\
        # Shells like IDLE catch the SystemExit, but listen when their\
        # stdin wrapper is closed.\
        try:\
            sys.stdin.close()\
        except:\
            pass\
>       raise SystemExit(code)\
E       SystemExit: None\
\
/usr/lib/python3.8/_sitebuiltins.py:26: SystemExit\
------------------ Captured stdout call -------------------\
Error: Numbers cannot be more than four digits\
_____________ test_template[test_only_digits] _____________\
\
arguments = [['98 + 3g5', '3801 - 2', '45 + 43', '123 + 49']]\
expected_output = 'Error: Numbers must only contain digits.'\
fail_message = 'Expected calling "arithmetic_arranger()" with a problem that contains a letter character in the number to return "Error: Numbers must only contain digits."'\
\
    @pytest.mark.parametrize('arguments,expected_output,fail_message', test_cases)\
    def test_template(arguments, expected_output, fail_message):\
>       actual = arithmetic_arranger(*arguments)\
\
test_module.py:76: \
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
arithmetic_arranger.py:32: in arithmetic_arranger\
    exit()\
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\
\
self = Use exit() or Ctrl-D (i.e. EOF) to exit, code = None\
\
    def __call__(self, code=None):\
        # Shells like IDLE catch the SystemExit, but listen when their\
        # stdin wrapper is closed.\
        try:\
            sys.stdin.close()\
        except:\
            pass\
>       raise SystemExit(code)\
E       SystemExit: None\
\
/usr/lib/python3.8/_sitebuiltins.py:26: SystemExit\
------------------ Captured stdout call -------------------\
Error: Numbers must only contain digits\
_____ test_template[test_two_problems_with_solutions] _____\
\
arguments = [['3 + 855', '988 + 40'], True]\
expected_output = '    3      988\\n+ 855    +  40\\n-----    -----\\n  858     1028'\
fail_message = 'Expected solutions to be correctly displayed in output when calling "arithmetic_arranger()" with ["3 + 855", "988 + 40"] and a second argument of `True`.'\
\
    @pytest.mark.parametrize('arguments,expected_output,fail_message', test_cases)\
    def test_template(arguments, expected_output, fail_message):\
>       actual = arithmetic_arranger(*arguments)\
E       TypeError: arithmetic_arranger() takes 1 positional argument but 2 were given\
\
test_module.py:76: TypeError\
____ test_template[test_five_problems_with_solutions] _____\
\
arguments = [['32 - 698', '1 - 3801', '45 + 43', '123 + 49', '988 + 40'], True]\
expected_output = '   32         1      45      123      988\\n- 698    - 3801    + 43    +  49    +  40\\n-----    ------    ----    -----    -----\\n -666     -3800      88      172     1028'\
fail_message = 'Expected solutions to be correctly displayed in output when calling "arithmetic_arranger()" with five arithmetic problems and a second argument of `True`.'\
\
    @pytest.mark.parametrize('arguments,expected_output,fail_message', test_cases)\
    def test_template(arguments, expected_output, fail_message):\
>       actual = arithmetic_arranger(*arguments)\
E       TypeError: arithmetic_arranger() takes 1 positional argument but 2 were given\
\
test_module.py:76: TypeError\
================= short test summary info =================\
FAILED test_module.py::test_template[test_two_problems_arrangement1]\
FAILED test_module.py::test_template[test_two_problems_arrangement2]\
FAILED test_module.py::test_template[test_four_problems_arrangement]\
FAILED test_module.py::test_template[test_five_problems_arrangement]\
FAILED test_module.py::test_template[test_too_many_problems]\
FAILED test_module.py::test_template[test_incorrect_operator]\
FAILED test_module.py::test_template[test_too_many_digits]\
FAILED test_module.py::test_template[test_only_digits]\
FAILED test_module.py::test_template[test_two_problems_with_solutions]\
FAILED test_module.py::test_template[test_five_problems_with_solutions]\
=================== 10 failed in 1.20s ====================\
\uc0\u61095  }